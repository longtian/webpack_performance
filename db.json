{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1472113855575},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1472113855575},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1472113855575},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1472113855575},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1472113855575},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1472113855575},{"_id":"source/_posts/2015-07-06-alias.md","hash":"6acb5af5ee9f4cce8816a6498a817bd9092e8bc1","modified":1472118155532},{"_id":"source/_posts/2016-02-24-compress.md","hash":"bef58f71b5f259ebf94cf15b14fd722b595f5113","modified":1472118155532},{"_id":"source/_posts/2016-04-25-statsd.md","hash":"c8b3f241193cb3c0279e3ec567c8650b6c99b8d2","modified":1472118155532},{"_id":"source/_posts/2016-05-16-babel-runtime.md","hash":"e90a3bcfb2a1646724c9c763d25768f1f4fb97ac","modified":1472118155532},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1472113855575},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1472113855575},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1472113855575},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1472113855575},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1472113855575},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1472113855575},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1472113855575},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1472113855575},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1472113855575},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1472113855575},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1472113855575},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1472113855575},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1472113855575},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1472113855575},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1472113855575},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"8a2eedfe19e7ee032b581888d0d746aeecb03af7","modified":1472115701610},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1472113855575},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1472113855575},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1472113855575},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1472113855575},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"42e32d0f1ff52406fc75daeec54df1fea74eff28","modified":1472115941561},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"9d0795f270b282c7946c826b74b685e7ffaa2953","modified":1472115992151},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"b230099c36cdb940a3f3d83941b09095bc224787","modified":1472118155532},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1472113855575},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1472113855575},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1472113855575},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1472113855575},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1472113855575},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1472113855575},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1472113855575},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1472113855575},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1472113855587},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1472113855591},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1472113855591},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1472113855575},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1472113855575},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1472113855575},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1472113855575},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1472113855575},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1472113855575},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1472113855583},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1472113855583},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1472113855587},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1472113855583},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1472113855587},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1472113855587},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1472113855587},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1472113855587},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1472113855587},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1472113855587},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1472113855587},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1472113855587},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1472113855587},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1472113855591},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1472113855591},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1472113855587},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1472113855591},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1472113855587},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1472113855591},{"_id":"public/archives/index.html","hash":"3ce9c1557a22cdcef69151b23820f31c0f2e32b1","modified":1472118230754},{"_id":"public/archives/2016/index.html","hash":"3c3e1d4c4bf0e50547f45cb7157c1062fcb32bc4","modified":1472118230819},{"_id":"public/index.html","hash":"786af2655e74d40d1d1fa6cbca67e3418f2464fa","modified":1472118230820},{"_id":"public/2016/05/16/babel-runtime/index.html","hash":"426f264f6c305c4cb7eba744165931e4d0085860","modified":1472118230827},{"_id":"public/2016/04/25/statsd/index.html","hash":"9eaf512abf181cf75a6939e0656a7b323be45bed","modified":1472118230827},{"_id":"public/2016/02/24/compress/index.html","hash":"895b258bd7f338a53bbd8a9e159ea5f200ebd490","modified":1472118230827},{"_id":"public/archives/2015/index.html","hash":"cd4333489ab4abf9bb28b3fc4b036b7d088f72fe","modified":1472118230827},{"_id":"public/archives/2015/07/index.html","hash":"a0cc92c5c3498461ae464389577df714a286c897","modified":1472118230828},{"_id":"public/archives/2016/02/index.html","hash":"f15c60c4d07fdbe1c84a0ae15adb73ea157c4aa2","modified":1472118230828},{"_id":"public/archives/2016/04/index.html","hash":"ad8638aa7fdbf823bae300645802420363f449b0","modified":1472118230828},{"_id":"public/archives/2016/05/index.html","hash":"fccee854200f7fdf2b0fcdf3068991cc57a5e67f","modified":1472118230828},{"_id":"public/2015/07/06/alias/index.html","hash":"b20aed52d789f1dd50867b65a75c293671f04788","modified":1472118230828},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1472118230831},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1472118230831},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1472118230831},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1472118230831},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1472118230831},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1472118230831},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1472118230833},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1472118230833},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1472118230834},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1472118230834},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1472118231267},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1472118231275},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1472118231275},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1472118231275},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1472118231275},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1472118231275},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1472118231275},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1472118231276},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1472118231276},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1472118231276},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1472118231276},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1472118231277},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1472118231278}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Webpack 关键指标监控","date":"2016-04-25T06:13:05.000Z","_content":"\n## 前言\n\n`吃自己的狗食` 是一个很有趣的文化。意思大致就是鼓励 IT 企业要使用自己的产品。比如淘宝每次发布新的版本前都会在\n公司内部做一个测试。通过 `吃自己的狗食` 可以及早的发现程序中的问题。\n\n### 背景介绍\n\nCloudInsight 是 OneAPM 在 2016 年初正式发布的一款性能监控的产品。它的前端采用了 React 来编写。\n并使用 Webpack 来打包。每次前端发版的时候必须在程序员的电脑上 check out 最新代码，然后运行一些列的脚本。\n在经历了两次加班到九点以后，我们觉得很有必要把打包的过程自动化。\n\n## 数据采集\n\n无论是 Webpack, Grunt 还是 Gulp, 它们都有一个很显著的特点，就是极易于扩展。对这样的工具来说，开发插件的简易程度\n有的时候直接决定了这套工具能获得多么广泛的生态系统。\n\n因此，要取得 Webpack 打包过程中的指标可以优先考虑使用插件的方式。\n\n## 编写 Webpack 插件\n\nWebpack 官网上有一篇详细的文章指导开发者如何编写 Webpack 插件\n\nhttp://webpack.github.io/docs/how-to-write-a-plugin.html\n\n摘录 HelloWorld 插件的代码如下：\n\n```js\nfunction HelloWorldPlugin(options) {\n  // Setup the plugin instance with options...\n}\n\nHelloWorldPlugin.prototype.apply = function(compiler) {\n  compiler.plugin('done', function() {\n    console.log('Hello World!');\n  });\n};\n\nmodule.exports = HelloWorldPlugin;\n```\n\n只需要实现 apply 方法即可。在 apply 方法中可以监听 Webpack 的各种事件。\n\n\n|事件名|描述|\n|------|-----|\n|done| 完成 |\n\n### 选择时间点\n\nCompiler 有点像一个 EventEmitter。打包完成的时候会触发一个 done 事件，我们只要监听这个事件就可以。\n\n```js\ncompiler.plugin('done', function (compilation) {\n\n});\n```\n\n回调的第一个参数是 compilation ，包含了这次打包几乎所有的信息。\n\n例如要获得打包过程中的所有警告的个数：\n\n```js\ncompilation.toJson().warnings.length\n```\n\n这样我们就得到了一个指标：\n\n```txt\nwebpack.warnings.count\n```\n\n那么哪些是我们需要重点关注的指标呢\n\n## 定义指标\n\n| 指标  | 介绍 |\n|------|------|\n|webpack.asset.kb_size|单个输出文件的大小|\n|webpack.assets.count|输出文件的个数|\n|webpack.assets.sum.kb_size|输出文件的合计大小|\n|webpack.chunks.count|分块总计|\n|webpack.errors.count|错误个数|\n|webpack.warnings.count|警告个数|\n|webpack.modules.count|模块个数|\n|webpack.time.ms|构建时间|\n\n## 标签系统\n\n`avg:webpack.asset.kb_size {name=main.js}`\n\n`avg:webpack.asset.kb_size`\n\n|-------|-------|\n|builder|打包的机器|\n|env    |环境     |\n\n## 数据展现\n\n## 自定义参数\n\n## 生成报表\n\n## 处理 stats.js\n","source":"_posts/2016-04-25-statsd.md","raw":"---\ntitle: Webpack 关键指标监控\ndate: 2016-04-25 14:13:05\ntags:\n---\n\n## 前言\n\n`吃自己的狗食` 是一个很有趣的文化。意思大致就是鼓励 IT 企业要使用自己的产品。比如淘宝每次发布新的版本前都会在\n公司内部做一个测试。通过 `吃自己的狗食` 可以及早的发现程序中的问题。\n\n### 背景介绍\n\nCloudInsight 是 OneAPM 在 2016 年初正式发布的一款性能监控的产品。它的前端采用了 React 来编写。\n并使用 Webpack 来打包。每次前端发版的时候必须在程序员的电脑上 check out 最新代码，然后运行一些列的脚本。\n在经历了两次加班到九点以后，我们觉得很有必要把打包的过程自动化。\n\n## 数据采集\n\n无论是 Webpack, Grunt 还是 Gulp, 它们都有一个很显著的特点，就是极易于扩展。对这样的工具来说，开发插件的简易程度\n有的时候直接决定了这套工具能获得多么广泛的生态系统。\n\n因此，要取得 Webpack 打包过程中的指标可以优先考虑使用插件的方式。\n\n## 编写 Webpack 插件\n\nWebpack 官网上有一篇详细的文章指导开发者如何编写 Webpack 插件\n\nhttp://webpack.github.io/docs/how-to-write-a-plugin.html\n\n摘录 HelloWorld 插件的代码如下：\n\n```js\nfunction HelloWorldPlugin(options) {\n  // Setup the plugin instance with options...\n}\n\nHelloWorldPlugin.prototype.apply = function(compiler) {\n  compiler.plugin('done', function() {\n    console.log('Hello World!');\n  });\n};\n\nmodule.exports = HelloWorldPlugin;\n```\n\n只需要实现 apply 方法即可。在 apply 方法中可以监听 Webpack 的各种事件。\n\n\n|事件名|描述|\n|------|-----|\n|done| 完成 |\n\n### 选择时间点\n\nCompiler 有点像一个 EventEmitter。打包完成的时候会触发一个 done 事件，我们只要监听这个事件就可以。\n\n```js\ncompiler.plugin('done', function (compilation) {\n\n});\n```\n\n回调的第一个参数是 compilation ，包含了这次打包几乎所有的信息。\n\n例如要获得打包过程中的所有警告的个数：\n\n```js\ncompilation.toJson().warnings.length\n```\n\n这样我们就得到了一个指标：\n\n```txt\nwebpack.warnings.count\n```\n\n那么哪些是我们需要重点关注的指标呢\n\n## 定义指标\n\n| 指标  | 介绍 |\n|------|------|\n|webpack.asset.kb_size|单个输出文件的大小|\n|webpack.assets.count|输出文件的个数|\n|webpack.assets.sum.kb_size|输出文件的合计大小|\n|webpack.chunks.count|分块总计|\n|webpack.errors.count|错误个数|\n|webpack.warnings.count|警告个数|\n|webpack.modules.count|模块个数|\n|webpack.time.ms|构建时间|\n\n## 标签系统\n\n`avg:webpack.asset.kb_size {name=main.js}`\n\n`avg:webpack.asset.kb_size`\n\n|-------|-------|\n|builder|打包的机器|\n|env    |环境     |\n\n## 数据展现\n\n## 自定义参数\n\n## 生成报表\n\n## 处理 stats.js\n","slug":"statsd","published":1,"updated":"2016-08-25T09:42:35.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisa56oau0000ovdg51wl1d13","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>吃自己的狗食</code> 是一个很有趣的文化。意思大致就是鼓励 IT 企业要使用自己的产品。比如淘宝每次发布新的版本前都会在<br>公司内部做一个测试。通过 <code>吃自己的狗食</code> 可以及早的发现程序中的问题。</p>\n<h3 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h3><p>CloudInsight 是 OneAPM 在 2016 年初正式发布的一款性能监控的产品。它的前端采用了 React 来编写。<br>并使用 Webpack 来打包。每次前端发版的时候必须在程序员的电脑上 check out 最新代码，然后运行一些列的脚本。<br>在经历了两次加班到九点以后，我们觉得很有必要把打包的过程自动化。</p>\n<h2 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h2><p>无论是 Webpack, Grunt 还是 Gulp, 它们都有一个很显著的特点，就是极易于扩展。对这样的工具来说，开发插件的简易程度<br>有的时候直接决定了这套工具能获得多么广泛的生态系统。</p>\n<p>因此，要取得 Webpack 打包过程中的指标可以优先考虑使用插件的方式。</p>\n<h2 id=\"编写-Webpack-插件\"><a href=\"#编写-Webpack-插件\" class=\"headerlink\" title=\"编写 Webpack 插件\"></a>编写 Webpack 插件</h2><p>Webpack 官网上有一篇详细的文章指导开发者如何编写 Webpack 插件</p>\n<p><a href=\"http://webpack.github.io/docs/how-to-write-a-plugin.html\" target=\"_blank\" rel=\"external\">http://webpack.github.io/docs/how-to-write-a-plugin.html</a></p>\n<p>摘录 HelloWorld 插件的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloWorldPlugin</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Setup the plugin instance with options...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">HelloWorldPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</div><div class=\"line\">  compiler.plugin(<span class=\"string\">'done'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = HelloWorldPlugin;</div></pre></td></tr></table></figure>\n<p>只需要实现 apply 方法即可。在 apply 方法中可以监听 Webpack 的各种事件。</p>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>done</td>\n<td>完成</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"选择时间点\"><a href=\"#选择时间点\" class=\"headerlink\" title=\"选择时间点\"></a>选择时间点</h3><p>Compiler 有点像一个 EventEmitter。打包完成的时候会触发一个 done 事件，我们只要监听这个事件就可以。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">compiler.plugin(<span class=\"string\">'done'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">compilation</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>回调的第一个参数是 compilation ，包含了这次打包几乎所有的信息。</p>\n<p>例如要获得打包过程中的所有警告的个数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compilation.toJson().warnings.length</div></pre></td></tr></table></figure>\n<p>这样我们就得到了一个指标：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack.warnings.count</div></pre></td></tr></table></figure>\n<p>那么哪些是我们需要重点关注的指标呢</p>\n<h2 id=\"定义指标\"><a href=\"#定义指标\" class=\"headerlink\" title=\"定义指标\"></a>定义指标</h2><table>\n<thead>\n<tr>\n<th>指标</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>webpack.asset.kb_size</td>\n<td>单个输出文件的大小</td>\n</tr>\n<tr>\n<td>webpack.assets.count</td>\n<td>输出文件的个数</td>\n</tr>\n<tr>\n<td>webpack.assets.sum.kb_size</td>\n<td>输出文件的合计大小</td>\n</tr>\n<tr>\n<td>webpack.chunks.count</td>\n<td>分块总计</td>\n</tr>\n<tr>\n<td>webpack.errors.count</td>\n<td>错误个数</td>\n</tr>\n<tr>\n<td>webpack.warnings.count</td>\n<td>警告个数</td>\n</tr>\n<tr>\n<td>webpack.modules.count</td>\n<td>模块个数</td>\n</tr>\n<tr>\n<td>webpack.time.ms</td>\n<td>构建时间</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"标签系统\"><a href=\"#标签系统\" class=\"headerlink\" title=\"标签系统\"></a>标签系统</h2><p><code>avg:webpack.asset.kb_size {name=main.js}</code></p>\n<p><code>avg:webpack.asset.kb_size</code></p>\n<p>|——-|——-|<br>|builder|打包的机器|<br>|env    |环境     |</p>\n<h2 id=\"数据展现\"><a href=\"#数据展现\" class=\"headerlink\" title=\"数据展现\"></a>数据展现</h2><h2 id=\"自定义参数\"><a href=\"#自定义参数\" class=\"headerlink\" title=\"自定义参数\"></a>自定义参数</h2><h2 id=\"生成报表\"><a href=\"#生成报表\" class=\"headerlink\" title=\"生成报表\"></a>生成报表</h2><h2 id=\"处理-stats-js\"><a href=\"#处理-stats-js\" class=\"headerlink\" title=\"处理 stats.js\"></a>处理 stats.js</h2>","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>吃自己的狗食</code> 是一个很有趣的文化。意思大致就是鼓励 IT 企业要使用自己的产品。比如淘宝每次发布新的版本前都会在<br>公司内部做一个测试。通过 <code>吃自己的狗食</code> 可以及早的发现程序中的问题。</p>\n<h3 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h3><p>CloudInsight 是 OneAPM 在 2016 年初正式发布的一款性能监控的产品。它的前端采用了 React 来编写。<br>并使用 Webpack 来打包。每次前端发版的时候必须在程序员的电脑上 check out 最新代码，然后运行一些列的脚本。<br>在经历了两次加班到九点以后，我们觉得很有必要把打包的过程自动化。</p>\n<h2 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h2><p>无论是 Webpack, Grunt 还是 Gulp, 它们都有一个很显著的特点，就是极易于扩展。对这样的工具来说，开发插件的简易程度<br>有的时候直接决定了这套工具能获得多么广泛的生态系统。</p>\n<p>因此，要取得 Webpack 打包过程中的指标可以优先考虑使用插件的方式。</p>\n<h2 id=\"编写-Webpack-插件\"><a href=\"#编写-Webpack-插件\" class=\"headerlink\" title=\"编写 Webpack 插件\"></a>编写 Webpack 插件</h2><p>Webpack 官网上有一篇详细的文章指导开发者如何编写 Webpack 插件</p>\n<p><a href=\"http://webpack.github.io/docs/how-to-write-a-plugin.html\">http://webpack.github.io/docs/how-to-write-a-plugin.html</a></p>\n<p>摘录 HelloWorld 插件的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloWorldPlugin</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Setup the plugin instance with options...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">HelloWorldPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</div><div class=\"line\">  compiler.plugin(<span class=\"string\">'done'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = HelloWorldPlugin;</div></pre></td></tr></table></figure>\n<p>只需要实现 apply 方法即可。在 apply 方法中可以监听 Webpack 的各种事件。</p>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>done</td>\n<td>完成</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"选择时间点\"><a href=\"#选择时间点\" class=\"headerlink\" title=\"选择时间点\"></a>选择时间点</h3><p>Compiler 有点像一个 EventEmitter。打包完成的时候会触发一个 done 事件，我们只要监听这个事件就可以。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">compiler.plugin(<span class=\"string\">'done'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">compilation</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>回调的第一个参数是 compilation ，包含了这次打包几乎所有的信息。</p>\n<p>例如要获得打包过程中的所有警告的个数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compilation.toJson().warnings.length</div></pre></td></tr></table></figure>\n<p>这样我们就得到了一个指标：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack.warnings.count</div></pre></td></tr></table></figure>\n<p>那么哪些是我们需要重点关注的指标呢</p>\n<h2 id=\"定义指标\"><a href=\"#定义指标\" class=\"headerlink\" title=\"定义指标\"></a>定义指标</h2><table>\n<thead>\n<tr>\n<th>指标</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>webpack.asset.kb_size</td>\n<td>单个输出文件的大小</td>\n</tr>\n<tr>\n<td>webpack.assets.count</td>\n<td>输出文件的个数</td>\n</tr>\n<tr>\n<td>webpack.assets.sum.kb_size</td>\n<td>输出文件的合计大小</td>\n</tr>\n<tr>\n<td>webpack.chunks.count</td>\n<td>分块总计</td>\n</tr>\n<tr>\n<td>webpack.errors.count</td>\n<td>错误个数</td>\n</tr>\n<tr>\n<td>webpack.warnings.count</td>\n<td>警告个数</td>\n</tr>\n<tr>\n<td>webpack.modules.count</td>\n<td>模块个数</td>\n</tr>\n<tr>\n<td>webpack.time.ms</td>\n<td>构建时间</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"标签系统\"><a href=\"#标签系统\" class=\"headerlink\" title=\"标签系统\"></a>标签系统</h2><p><code>avg:webpack.asset.kb_size {name=main.js}</code></p>\n<p><code>avg:webpack.asset.kb_size</code></p>\n<p>|——-|——-|<br>|builder|打包的机器|<br>|env    |环境     |</p>\n<h2 id=\"数据展现\"><a href=\"#数据展现\" class=\"headerlink\" title=\"数据展现\"></a>数据展现</h2><h2 id=\"自定义参数\"><a href=\"#自定义参数\" class=\"headerlink\" title=\"自定义参数\"></a>自定义参数</h2><h2 id=\"生成报表\"><a href=\"#生成报表\" class=\"headerlink\" title=\"生成报表\"></a>生成报表</h2><h2 id=\"处理-stats-js\"><a href=\"#处理-stats-js\" class=\"headerlink\" title=\"处理 stats.js\"></a>处理 stats.js</h2>"},{"title":"合并 Babel 助手方法","date":"2016-05-16T09:51:35.000Z","_content":"\n`Babel` 在转换一个文件的时候会加上一些助手方法，这些助手方法会完成诸如创建类，检查类构造函数调用等功能。\n其实就是用 `ES5` 来实现 `ES6` 相关特性的代码。\n\n这些代码如果每个文件生成的时候都带上，必然会增加项目打包结果的整体大小。\n因此 `Babel` 项目单独抽出了一个模块叫做 `babel-runtime`。用于存放公共助手方法。\n\n[具体的介绍可以看这个链接](https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md#babel-runtime)\n\n## 启用前后的差别\n\n**引入 `BabelRuntime` 前**\n\n2,915,331 bytes\n\n**引入 `BabelRuntime` 后**\n\n2,992,866 bytes\n\n减少了 77 KB\n\n## 开启 Gzip 后，效果就不那么明显了\n\n**引入 `babel-runtime` 前，`Gzip` 压缩结果**\n\n808,753 bytes\n\n**引入 `babel-runtime` 后，`Gzip` 压缩结果**\n\n803,013 bytes\n\n只减少了 5 kb，可见 `Gzip` 在压缩字符串的时候还是很给力的。\n\n## 其它技术细节\n\n除了合并 Babel 助手方法， `babel-runtime` 还有其他两个作用\n\n- 使用 `generator/sync` 的时候自动加载 `babel-runtime/regenerator` 依赖\n- 使用 `Promise` 和 `Object.assign` 的时候自动加载 `babel-runtime/core-js`\n\n[原文](http://babeljs.io/docs/plugins/transform-runtime/#technical-details)\n","source":"_posts/2016-05-16-babel-runtime.md","raw":"---\ntitle: 合并 Babel 助手方法\ndate: 2016-05-16 17:51:35\ntags:\n---\n\n`Babel` 在转换一个文件的时候会加上一些助手方法，这些助手方法会完成诸如创建类，检查类构造函数调用等功能。\n其实就是用 `ES5` 来实现 `ES6` 相关特性的代码。\n\n这些代码如果每个文件生成的时候都带上，必然会增加项目打包结果的整体大小。\n因此 `Babel` 项目单独抽出了一个模块叫做 `babel-runtime`。用于存放公共助手方法。\n\n[具体的介绍可以看这个链接](https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md#babel-runtime)\n\n## 启用前后的差别\n\n**引入 `BabelRuntime` 前**\n\n2,915,331 bytes\n\n**引入 `BabelRuntime` 后**\n\n2,992,866 bytes\n\n减少了 77 KB\n\n## 开启 Gzip 后，效果就不那么明显了\n\n**引入 `babel-runtime` 前，`Gzip` 压缩结果**\n\n808,753 bytes\n\n**引入 `babel-runtime` 后，`Gzip` 压缩结果**\n\n803,013 bytes\n\n只减少了 5 kb，可见 `Gzip` 在压缩字符串的时候还是很给力的。\n\n## 其它技术细节\n\n除了合并 Babel 助手方法， `babel-runtime` 还有其他两个作用\n\n- 使用 `generator/sync` 的时候自动加载 `babel-runtime/regenerator` 依赖\n- 使用 `Promise` 和 `Object.assign` 的时候自动加载 `babel-runtime/core-js`\n\n[原文](http://babeljs.io/docs/plugins/transform-runtime/#technical-details)\n","slug":"babel-runtime","published":1,"updated":"2016-08-25T09:42:35.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisa56oaz0001ovdgjgs1a4yt","content":"<p><code>Babel</code> 在转换一个文件的时候会加上一些助手方法，这些助手方法会完成诸如创建类，检查类构造函数调用等功能。<br>其实就是用 <code>ES5</code> 来实现 <code>ES6</code> 相关特性的代码。</p>\n<p>这些代码如果每个文件生成的时候都带上，必然会增加项目打包结果的整体大小。<br>因此 <code>Babel</code> 项目单独抽出了一个模块叫做 <code>babel-runtime</code>。用于存放公共助手方法。</p>\n<p><a href=\"https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md#babel-runtime\" target=\"_blank\" rel=\"external\">具体的介绍可以看这个链接</a></p>\n<h2 id=\"启用前后的差别\"><a href=\"#启用前后的差别\" class=\"headerlink\" title=\"启用前后的差别\"></a>启用前后的差别</h2><p><strong>引入 <code>BabelRuntime</code> 前</strong></p>\n<p>2,915,331 bytes</p>\n<p><strong>引入 <code>BabelRuntime</code> 后</strong></p>\n<p>2,992,866 bytes</p>\n<p>减少了 77 KB</p>\n<h2 id=\"开启-Gzip-后，效果就不那么明显了\"><a href=\"#开启-Gzip-后，效果就不那么明显了\" class=\"headerlink\" title=\"开启 Gzip 后，效果就不那么明显了\"></a>开启 Gzip 后，效果就不那么明显了</h2><p><strong>引入 <code>babel-runtime</code> 前，<code>Gzip</code> 压缩结果</strong></p>\n<p>808,753 bytes</p>\n<p><strong>引入 <code>babel-runtime</code> 后，<code>Gzip</code> 压缩结果</strong></p>\n<p>803,013 bytes</p>\n<p>只减少了 5 kb，可见 <code>Gzip</code> 在压缩字符串的时候还是很给力的。</p>\n<h2 id=\"其它技术细节\"><a href=\"#其它技术细节\" class=\"headerlink\" title=\"其它技术细节\"></a>其它技术细节</h2><p>除了合并 Babel 助手方法， <code>babel-runtime</code> 还有其他两个作用</p>\n<ul>\n<li>使用 <code>generator/sync</code> 的时候自动加载 <code>babel-runtime/regenerator</code> 依赖</li>\n<li>使用 <code>Promise</code> 和 <code>Object.assign</code> 的时候自动加载 <code>babel-runtime/core-js</code></li>\n</ul>\n<p><a href=\"http://babeljs.io/docs/plugins/transform-runtime/#technical-details\" target=\"_blank\" rel=\"external\">原文</a></p>\n","excerpt":"","more":"<p><code>Babel</code> 在转换一个文件的时候会加上一些助手方法，这些助手方法会完成诸如创建类，检查类构造函数调用等功能。<br>其实就是用 <code>ES5</code> 来实现 <code>ES6</code> 相关特性的代码。</p>\n<p>这些代码如果每个文件生成的时候都带上，必然会增加项目打包结果的整体大小。<br>因此 <code>Babel</code> 项目单独抽出了一个模块叫做 <code>babel-runtime</code>。用于存放公共助手方法。</p>\n<p><a href=\"https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md#babel-runtime\">具体的介绍可以看这个链接</a></p>\n<h2 id=\"启用前后的差别\"><a href=\"#启用前后的差别\" class=\"headerlink\" title=\"启用前后的差别\"></a>启用前后的差别</h2><p><strong>引入 <code>BabelRuntime</code> 前</strong></p>\n<p>2,915,331 bytes</p>\n<p><strong>引入 <code>BabelRuntime</code> 后</strong></p>\n<p>2,992,866 bytes</p>\n<p>减少了 77 KB</p>\n<h2 id=\"开启-Gzip-后，效果就不那么明显了\"><a href=\"#开启-Gzip-后，效果就不那么明显了\" class=\"headerlink\" title=\"开启 Gzip 后，效果就不那么明显了\"></a>开启 Gzip 后，效果就不那么明显了</h2><p><strong>引入 <code>babel-runtime</code> 前，<code>Gzip</code> 压缩结果</strong></p>\n<p>808,753 bytes</p>\n<p><strong>引入 <code>babel-runtime</code> 后，<code>Gzip</code> 压缩结果</strong></p>\n<p>803,013 bytes</p>\n<p>只减少了 5 kb，可见 <code>Gzip</code> 在压缩字符串的时候还是很给力的。</p>\n<h2 id=\"其它技术细节\"><a href=\"#其它技术细节\" class=\"headerlink\" title=\"其它技术细节\"></a>其它技术细节</h2><p>除了合并 Babel 助手方法， <code>babel-runtime</code> 还有其他两个作用</p>\n<ul>\n<li>使用 <code>generator/sync</code> 的时候自动加载 <code>babel-runtime/regenerator</code> 依赖</li>\n<li>使用 <code>Promise</code> 和 <code>Object.assign</code> 的时候自动加载 <code>babel-runtime/core-js</code></li>\n</ul>\n<p><a href=\"http://babeljs.io/docs/plugins/transform-runtime/#technical-details\">原文</a></p>\n"},{"title":"压缩 JS","date":"2016-02-24T05:55:49.000Z","_content":"\n大家新年好 ^^，这是 [Webpack 性能优化](https://github.com/wyvernnot/webpack_performance) 系列文章的第二篇。\n在这篇里我们来通过一个实际的例子来看看如何在 Webpack 打包的时候启用压缩。\n\n这个例子是由 Github 网友 `@zjy01` 提供的: [react_and_redux_and_router_example](https://github.com/zjy01/react_and_redux_and_router_example)\n\n**在不做任何更改的情况下**\n\n```sh\nwebpack --config webpack.static.config.js\n```\n\n结果：\n\n```txt\nTime: 1726ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js   949 kB    0, 1  [emitted]  bundle\ncommon.js  3.55 kB       1  [emitted]  common.js\n    + 257 hidden modules\n```\n\n输出文件加起来将近 1 MB。\n\n打开 `bundle.js`，发现所有的换行和注释都保留着，所有的变量名都原汁原味，这些问题很容易通过 `uglify` 来解决。\n但是由于 `uglify` 以后代码可读性就会大大降低，这样就不容易发现隐藏的其它问题，所以我们先不急着 `uglify` 而是先看看生成的代码。\n\n不难发现，为了调试的需要，React 发布在 NPM 上的源码里有很多地方检测了当前环境。\n\n```js\nif (process.env.NODE_ENV !== 'production') {\n  // 如果不是产品环境就怎样怎样\n}\n```\n\n## 使用 DefinePlugin 消除环境监测的代码\n\n通过编辑 webpack 的配置文件，加上 DefinePlugin，把 process.env.NODE_ENV 替换掉\n\n```js\n{\n plugins:[\n    ...\n    new webpack.DefinePlugin({\n      'process.env': {\n          'NODE_ENV': JSON.stringify(process.env.NODE_ENV)\n      }\n    })\n ]\n}\n```\n\n再次执行\n\n```sh\nNODE_ENV=production webpack --config webpack.static.config.js\n```\n\n结果：\n\n```txt\nTime: 1859ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js   932 kB    0, 1  [emitted]  bundle\ncommon.js  3.55 kB       1  [emitted]  common.js\n    + 256 hidden modules\n```\n\n仅仅减小了 16 kB左右，这是因为 DefinePlugin 只会做简单的替换，之前有关环境检测的代码替换后如下：\n\n```js\nif (false) {\n  // 如果不是产品环境就怎样怎样\n}\n```\n\n实际上 if 块里的代码已经变成了 `dead code` ，即死区，永远都不会被执行到。而清除代码死区正是 `uglifyjs` 非常擅长的地方。\n\n## 使用 uglifyjs 压缩代码\n\n在前端打包的流程中，`uglify` 操作是如此的常见以至于被内置进了 `webpack` 里，使用的时候加上 `--optimize-minimize` 参数即可。\n\n```sh\nNODE_ENV=production webpack --config webpack.static.config.js --optimize-minimize\n```\n\n结果：\n\n```txt\nTime: 4059ms\n    Asset       Size  Chunks             Chunk Names\nbundle.js     223 kB    0, 1  [emitted]  bundle\ncommon.js  735 bytes       1  [emitted]  common.js\n    + 252 hidden modules\n```\n\n## 关于\n\nwebpack 版本 1.12.14\n\n## 总结\n\n通过这篇文章，简单介绍了如何在 Webpack 打包的时候启用压缩，重点在于消除环境相关的代码。\n","source":"_posts/2016-02-24-compress.md","raw":"---\ntitle: 压缩 JS\ndate: 2016-02-24 13:55:49\ntags:\n---\n\n大家新年好 ^^，这是 [Webpack 性能优化](https://github.com/wyvernnot/webpack_performance) 系列文章的第二篇。\n在这篇里我们来通过一个实际的例子来看看如何在 Webpack 打包的时候启用压缩。\n\n这个例子是由 Github 网友 `@zjy01` 提供的: [react_and_redux_and_router_example](https://github.com/zjy01/react_and_redux_and_router_example)\n\n**在不做任何更改的情况下**\n\n```sh\nwebpack --config webpack.static.config.js\n```\n\n结果：\n\n```txt\nTime: 1726ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js   949 kB    0, 1  [emitted]  bundle\ncommon.js  3.55 kB       1  [emitted]  common.js\n    + 257 hidden modules\n```\n\n输出文件加起来将近 1 MB。\n\n打开 `bundle.js`，发现所有的换行和注释都保留着，所有的变量名都原汁原味，这些问题很容易通过 `uglify` 来解决。\n但是由于 `uglify` 以后代码可读性就会大大降低，这样就不容易发现隐藏的其它问题，所以我们先不急着 `uglify` 而是先看看生成的代码。\n\n不难发现，为了调试的需要，React 发布在 NPM 上的源码里有很多地方检测了当前环境。\n\n```js\nif (process.env.NODE_ENV !== 'production') {\n  // 如果不是产品环境就怎样怎样\n}\n```\n\n## 使用 DefinePlugin 消除环境监测的代码\n\n通过编辑 webpack 的配置文件，加上 DefinePlugin，把 process.env.NODE_ENV 替换掉\n\n```js\n{\n plugins:[\n    ...\n    new webpack.DefinePlugin({\n      'process.env': {\n          'NODE_ENV': JSON.stringify(process.env.NODE_ENV)\n      }\n    })\n ]\n}\n```\n\n再次执行\n\n```sh\nNODE_ENV=production webpack --config webpack.static.config.js\n```\n\n结果：\n\n```txt\nTime: 1859ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js   932 kB    0, 1  [emitted]  bundle\ncommon.js  3.55 kB       1  [emitted]  common.js\n    + 256 hidden modules\n```\n\n仅仅减小了 16 kB左右，这是因为 DefinePlugin 只会做简单的替换，之前有关环境检测的代码替换后如下：\n\n```js\nif (false) {\n  // 如果不是产品环境就怎样怎样\n}\n```\n\n实际上 if 块里的代码已经变成了 `dead code` ，即死区，永远都不会被执行到。而清除代码死区正是 `uglifyjs` 非常擅长的地方。\n\n## 使用 uglifyjs 压缩代码\n\n在前端打包的流程中，`uglify` 操作是如此的常见以至于被内置进了 `webpack` 里，使用的时候加上 `--optimize-minimize` 参数即可。\n\n```sh\nNODE_ENV=production webpack --config webpack.static.config.js --optimize-minimize\n```\n\n结果：\n\n```txt\nTime: 4059ms\n    Asset       Size  Chunks             Chunk Names\nbundle.js     223 kB    0, 1  [emitted]  bundle\ncommon.js  735 bytes       1  [emitted]  common.js\n    + 252 hidden modules\n```\n\n## 关于\n\nwebpack 版本 1.12.14\n\n## 总结\n\n通过这篇文章，简单介绍了如何在 Webpack 打包的时候启用压缩，重点在于消除环境相关的代码。\n","slug":"compress","published":1,"updated":"2016-08-25T09:42:35.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisa56ob40002ovdgi3d769rb","content":"<p>大家新年好 ^^，这是 <a href=\"https://github.com/wyvernnot/webpack_performance\" target=\"_blank\" rel=\"external\">Webpack 性能优化</a> 系列文章的第二篇。<br>在这篇里我们来通过一个实际的例子来看看如何在 Webpack 打包的时候启用压缩。</p>\n<p>这个例子是由 Github 网友 <code>@zjy01</code> 提供的: <a href=\"https://github.com/zjy01/react_and_redux_and_router_example\" target=\"_blank\" rel=\"external\">react_and_redux_and_router_example</a></p>\n<p><strong>在不做任何更改的情况下</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack --config webpack.static.config.js</div></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Time: 1726ms</div><div class=\"line\">    Asset     Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js   949 kB    0, 1  [emitted]  bundle</div><div class=\"line\">common.js  3.55 kB       1  [emitted]  common.js</div><div class=\"line\">    + 257 hidden modules</div></pre></td></tr></table></figure>\n<p>输出文件加起来将近 1 MB。</p>\n<p>打开 <code>bundle.js</code>，发现所有的换行和注释都保留着，所有的变量名都原汁原味，这些问题很容易通过 <code>uglify</code> 来解决。<br>但是由于 <code>uglify</code> 以后代码可读性就会大大降低，这样就不容易发现隐藏的其它问题，所以我们先不急着 <code>uglify</code> 而是先看看生成的代码。</p>\n<p>不难发现，为了调试的需要，React 发布在 NPM 上的源码里有很多地方检测了当前环境。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// 如果不是产品环境就怎样怎样</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用-DefinePlugin-消除环境监测的代码\"><a href=\"#使用-DefinePlugin-消除环境监测的代码\" class=\"headerlink\" title=\"使用 DefinePlugin 消除环境监测的代码\"></a>使用 DefinePlugin 消除环境监测的代码</h2><p>通过编辑 webpack 的配置文件，加上 DefinePlugin，把 process.env.NODE_ENV 替换掉</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"> plugins:[</div><div class=\"line\">    ...</div><div class=\"line\">    new webpack.DefinePlugin(&#123;</div><div class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</div><div class=\"line\">          <span class=\"string\">'NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(process.env.NODE_ENV)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"> ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再次执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NODE_ENV=production webpack --config webpack.static.config.js</div></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Time: 1859ms</div><div class=\"line\">    Asset     Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js   932 kB    0, 1  [emitted]  bundle</div><div class=\"line\">common.js  3.55 kB       1  [emitted]  common.js</div><div class=\"line\">    + 256 hidden modules</div></pre></td></tr></table></figure>\n<p>仅仅减小了 16 kB左右，这是因为 DefinePlugin 只会做简单的替换，之前有关环境检测的代码替换后如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// 如果不是产品环境就怎样怎样</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际上 if 块里的代码已经变成了 <code>dead code</code> ，即死区，永远都不会被执行到。而清除代码死区正是 <code>uglifyjs</code> 非常擅长的地方。</p>\n<h2 id=\"使用-uglifyjs-压缩代码\"><a href=\"#使用-uglifyjs-压缩代码\" class=\"headerlink\" title=\"使用 uglifyjs 压缩代码\"></a>使用 uglifyjs 压缩代码</h2><p>在前端打包的流程中，<code>uglify</code> 操作是如此的常见以至于被内置进了 <code>webpack</code> 里，使用的时候加上 <code>--optimize-minimize</code> 参数即可。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NODE_ENV=production webpack --config webpack.static.config.js --optimize-minimize</div></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Time: 4059ms</div><div class=\"line\">    Asset       Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js     223 kB    0, 1  [emitted]  bundle</div><div class=\"line\">common.js  735 bytes       1  [emitted]  common.js</div><div class=\"line\">    + 252 hidden modules</div></pre></td></tr></table></figure>\n<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2><p>webpack 版本 1.12.14</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过这篇文章，简单介绍了如何在 Webpack 打包的时候启用压缩，重点在于消除环境相关的代码。</p>\n","excerpt":"","more":"<p>大家新年好 ^^，这是 <a href=\"https://github.com/wyvernnot/webpack_performance\">Webpack 性能优化</a> 系列文章的第二篇。<br>在这篇里我们来通过一个实际的例子来看看如何在 Webpack 打包的时候启用压缩。</p>\n<p>这个例子是由 Github 网友 <code>@zjy01</code> 提供的: <a href=\"https://github.com/zjy01/react_and_redux_and_router_example\">react_and_redux_and_router_example</a></p>\n<p><strong>在不做任何更改的情况下</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack --config webpack.static.config.js</div></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Time: 1726ms</div><div class=\"line\">    Asset     Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js   949 kB    0, 1  [emitted]  bundle</div><div class=\"line\">common.js  3.55 kB       1  [emitted]  common.js</div><div class=\"line\">    + 257 hidden modules</div></pre></td></tr></table></figure>\n<p>输出文件加起来将近 1 MB。</p>\n<p>打开 <code>bundle.js</code>，发现所有的换行和注释都保留着，所有的变量名都原汁原味，这些问题很容易通过 <code>uglify</code> 来解决。<br>但是由于 <code>uglify</code> 以后代码可读性就会大大降低，这样就不容易发现隐藏的其它问题，所以我们先不急着 <code>uglify</code> 而是先看看生成的代码。</p>\n<p>不难发现，为了调试的需要，React 发布在 NPM 上的源码里有很多地方检测了当前环境。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// 如果不是产品环境就怎样怎样</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用-DefinePlugin-消除环境监测的代码\"><a href=\"#使用-DefinePlugin-消除环境监测的代码\" class=\"headerlink\" title=\"使用 DefinePlugin 消除环境监测的代码\"></a>使用 DefinePlugin 消除环境监测的代码</h2><p>通过编辑 webpack 的配置文件，加上 DefinePlugin，把 process.env.NODE_ENV 替换掉</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"> plugins:[</div><div class=\"line\">    ...</div><div class=\"line\">    new webpack.DefinePlugin(&#123;</div><div class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</div><div class=\"line\">          <span class=\"string\">'NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(process.env.NODE_ENV)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"> ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再次执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NODE_ENV=production webpack --config webpack.static.config.js</div></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Time: 1859ms</div><div class=\"line\">    Asset     Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js   932 kB    0, 1  [emitted]  bundle</div><div class=\"line\">common.js  3.55 kB       1  [emitted]  common.js</div><div class=\"line\">    + 256 hidden modules</div></pre></td></tr></table></figure>\n<p>仅仅减小了 16 kB左右，这是因为 DefinePlugin 只会做简单的替换，之前有关环境检测的代码替换后如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// 如果不是产品环境就怎样怎样</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际上 if 块里的代码已经变成了 <code>dead code</code> ，即死区，永远都不会被执行到。而清除代码死区正是 <code>uglifyjs</code> 非常擅长的地方。</p>\n<h2 id=\"使用-uglifyjs-压缩代码\"><a href=\"#使用-uglifyjs-压缩代码\" class=\"headerlink\" title=\"使用 uglifyjs 压缩代码\"></a>使用 uglifyjs 压缩代码</h2><p>在前端打包的流程中，<code>uglify</code> 操作是如此的常见以至于被内置进了 <code>webpack</code> 里，使用的时候加上 <code>--optimize-minimize</code> 参数即可。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NODE_ENV=production webpack --config webpack.static.config.js --optimize-minimize</div></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Time: 4059ms</div><div class=\"line\">    Asset       Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js     223 kB    0, 1  [emitted]  bundle</div><div class=\"line\">common.js  735 bytes       1  [emitted]  common.js</div><div class=\"line\">    + 252 hidden modules</div></pre></td></tr></table></figure>\n<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2><p>webpack 版本 1.12.14</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过这篇文章，简单介绍了如何在 Webpack 打包的时候启用压缩，重点在于消除环境相关的代码。</p>\n"},{"title":"使用别名做重定向","date":"2015-07-06T09:47:55.000Z","_content":"\n## 前言\n\nWebpack 是 OneAPM 前端技术栈中很重要的一部分，它非常好用，如果你还不了解它，建议你阅读这篇 [Webpack 入门指迷](http://segmentfault.com/a/1190000002551952) \n，在 OneAPM 我们用它完成静态资源打包，ES6 代码的转换 ，React 组件的组织等，在接下来的日子里，我们将通过一系列文章和业界分享我们在使用 Webpack 过程中关于性能方面的经验。\n\n作为系列文章的第一篇，我们会重点介绍 Webpack 中的 `resolve.alias` ，也就是请求重定向。不过请注意 Webpack 里的请求是对模块的依赖，也就是一个 `require` 语句，而不是一个 HTTP 请求。\n\n**必要的准备**\n\n- 需要你有一定的 Node.js 基础\n- 电脑上装有最新版的 Webpack (`npm install webpack -g`)\n- 了解 Webpack 配置文件的格式\n\n**例子：本地时钟**\n\n要实现的功能很简单，就是在页面上用中文显示当前时间，需要用到 [`moment`](http://momentjs.com/) 这个库，这个库封装了很多和日期相关的函数，而且自带了国际化的支持。\n\n### 新建一个 Node.js 项目\n\n使用 `npm init` 初始化你的项目，然后通过 `npm install moment -D` 加上 `moment` 的开发者依赖。\n\n新建一个 `entry.js` 作为入口文件，当然你也可以用 `app.js` 这样的名字，只是大部分的 Webpack 示例都是用的是 `entry.js`。\n\n```js\nvar moment = require('moment');\ndocument.write(moment().locale('zh-cn').format('LLLL'));\n```\n\n新建一个页面 `index.html`, 引用 `bundle.js`:\n\n```html\n<body>\n<h5>当前时间:</h5>\n<script src=\"dist/bundle.js\"></script>\n</body>\n```\n\n此时的文件目录看起来是这样的:\n\n```text\nindex.html\npackage.json\nentry.js\nnode_modules/moment\n```\n\n到目前为止 `bundle.js` 这个文件还不存在，不过别着急，接下来的工作就交给 Webpack 来完成。\n\n```text\nindex.html  ------------------------+               \npackage.json                        |               \n                                    +--> <Clock App>\nentry.js    --------+               |               \n                    +-->bundle.js+--+               \nnode_modules/moment-+                                                                                                      \n```       \n\n如图，Webpack 会把 `entry.js` 和 `moment` 模块一起打包成一个 bundle.js 文件，和 `index.html` 一起构成了我们的 Clock App。怎么样，是不是已经听到 Clock App 滴答作响了？\n\n### 使用 webpack 打包代码\n\n在命令行执行：\n\n```sh\nwebpack --entry ./entry.js --output-path dist --output-file bundle.js\n```\n\n你会看到类似下面的输出结果:\n\n```\nHash: bf9007fb1e0cb30e3ef7\nVersion: webpack 1.10.0\nTime: 650ms\n    Asset    Size  Chunks             Chunk Names\nbundle.js  378 kB       0  [emitted]  null\n   [0] ./entry.js 125 bytes {0} [built]\n    + 86 hidden modules\n```\n\n可以看到，耗时 650ms，这么慢着实让人意外，一定要想办法提高“新一代神器”速度；另一方面，最后一行的 **+ 86 hidden modules** 非常让人怀疑：明明是一个简单的 Clock App，怎么会有这么多的依赖。\n\n## 如何快速定位 Webpack 速度慢的原因\n\n再一次，在命令行输入：\n\n```sh\nwebpack --entry ./entry.js --output-path dist --output-file bundle.js \\\n--colors \\\n--profile \\\n--display-modules\n```\n\n不过这次新增加了三个参数，这三个参数的含义分别是：\n\n- `--colors` 输出结果带彩色，比如：会用红色显示耗时较长的步骤\n- `--profile` 输出性能数据，可以看到每一步的耗时\n- `--display-modules` 默认情况下 `node_modules` 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块\n\n这次命令行的结果已经很有参考价值，可以帮助我们定位耗时比较长的步骤\n\n```\nHash: bf9007fb1e0cb30e3ef7\nVersion: webpack 1.10.0\nTime: 650ms\n    Asset    Size  Chunks             Chunk Names\nbundle.js  378 kB       0  [emitted]  null\n   [0] ./entry.js 125 bytes {0} [built]\n       factory:11ms building:8ms = 19ms\n   [1] ../~/moment/moment.js 102 kB {0} [built]\n       [0] 19ms -> factory:7ms building:141ms = 167ms\n   [2] (webpack)/buildin/module.js 251 bytes {0} [built]\n       [0] 19ms -> [1] 148ms -> factory:132ms building:159ms = 458ms\n   [3] ../~/moment/locale ^\\.\\/.*$ 2.01 kB {0} [optional] [built]\n       [0] 19ms -> [1] 148ms -> factory:6ms building:10ms dependencies:113ms = 296ms\n   [4] ../~/moment/locale/af.js 2.57 kB {0} [optional] [built]\n       [0] 19ms -> [1] 148ms -> [3] 16ms -> factory:52ms building:65ms dependencies:138ms = 438ms\n                  ..... 广告分割线，Node.js 工程师简历请发 nodejs@oneapm.com ......\n   [85] ../~/moment/locale/zh-cn.js 4.31 kB {0} [optional] [built]\n        [0] 22ms -> [1] 162ms -> [3] 18ms -> factory:125ms building:145ms dependencies:22ms = 494ms\n   [86] ../~/moment/locale/zh-tw.js 3.07 kB {0} [optional] [built]\n        [0] 22ms -> [1] 162ms -> [3] 18ms -> factory:126ms building:146ms dependencies:21ms = 495ms\n```\n\n从命令行的结果里可以看到从 Request[4] 到 Request[86] 都是在解析 `moment.js` 附带的大量本地化文件。所以我们遇到的速度慢的问题其实是由 `moment` 引起的。\n\n如果你想知道为什么 Webpack 会加载这么多的模块，可以参考这篇文章 [ Why Enormous Locales During Webpack MomentJS](https://github.com/wyvernnot/webpack_performance/tree/master/moment-example/WHY_LOCALES.md)\n\n我们再来看看 `entry.js` 代码的第一行,标准的 `CommonJS` 写法:\n\n```js\nvar moment = require('moment');\n```\n\n也就是说，请求的是 `moment` 的源码。实际上，通过 NPM 安装 `moment` 的时候会同时安装 `moment` 的源码和压缩后的代码，试验证明下面这种写法也是可行的：\n\n```js\nvar moment = require('moment/min/moment-with-locales.min.js');\n```\n\n只不过这样改，可读性会有所下降，而且每一个用到 `moment` 的地方都得这么写。另外，如果同样的问题出现在第三方模块中，修改别人代码就不那么方便了。下面来看看用 Webpack 怎么解决这个问题。\n\n### 在 Webpack 中使用别名\n\n别名（`resolve.alias`） 是 Webpack 的一个配置项，它的作用是把用户的一个请求重定向到另一个路径，例如通过修改 `webpack.config.js` 配置文件，加入：\n\n```\n  resolve: {\n    alias: {\n        moment: \"moment/min/moment-with-locales.min.js\"\n    }\n  }\n```\n\n这样待打包的脚本中的 `require('moment');` 其实就等价于 `require('moment/min/moment-with-locales.min.js');` 。通过别名的使用在本例中可以减少几乎一半的时间。\n\n```\nHash: cdea65709b783ee0741a\nVersion: webpack 1.10.0\nTime: 320ms\n    Asset    Size  Chunks             Chunk Names\nbundle.js  148 kB       0  [emitted]  main\n   [0] ./entry.js 125 bytes {0} [built]\n       factory:11ms building:9ms = 20ms\n   [1] ../~/moment/min/moment-with-locales.min.js 146 kB {0} [built] [1 warning]\n       [0] 20ms -> factory:8ms building:263ms = 291ms\n   [2] (webpack)/buildin/module.js 251 bytes {0} [built]\n       [0] 20ms -> [1] 271ms -> factory:3ms building:1ms = 295ms\n\nWARNING in ../~/moment/min/moment-with-locales.min.js\nModule not found: Error: Cannot resolve 'file' or 'directory' ./locale in */webpack_performance/node_modules/moment/min\n @ ../~/moment/min/moment-with-locales.min.js 1:2731-2753\n```\n\n### 在 Webpack 中忽略对已知文件的解析\n\n`module.noParse` 是 `webpack` 的另一个很有用的配置项，如果你 **确定一个模块中没有其它新的依赖** 就可以配置这项，`webpack` 将不再扫描这个文件中的依赖。\n\n```\n  module: {\n    noParse: [/moment-with-locales/]\n  }\n```\n\n这样修改，再结合前面重命名的例子，更新后的流程是： \n\n- `webpack` 检查到 `entry.js` 文件对 `moment` 的请求；\n- 请求被 `alias` 重定向，转而请求 `moment/min/moment-with-locales.min.js`；\n- `noParse` 规则中的 `/moment-with-locales/` 一条生效，所以 `webpack` 就直接把依赖打包进了 `bundle.js` 。\n\n```\nHash: 907880ed7638b4ed70b9\nVersion: webpack 1.10.0\nTime: 76ms\n    Asset    Size  Chunks             Chunk Names\nbundle.js  147 kB       0  [emitted]  main\n   [0] ./entry.js 125 bytes {0} [built]\n       factory:13ms building:13ms = 26ms\n   [1] ../~/moment/min/moment-with-locales.min.js 146 kB {0} [built]\n       [0] 26ms -> factory:13ms building:5ms = 44ms\n```\n\n时间进一步被压缩，只需要 76ms，比前一步还减少了 75%。\n\n### 在 Webpack 中使用公用 CDN\n\nWebpack 是如此的强大，用其打包的脚本可以运行在多种环境下，Web 环境只是其默认的一种，也是最常用的一种。考虑到 Web 上有很多的公用 CDN 服务，那么\n怎么将 Webpack 和公用的 CDN 结合使用呢？方法是使用 `externals` 声明一个外部依赖。\n\n```\n  externals: {\n    moment: true\n  }\n```\n\n当然了 HTML 代码里需要加上一行\n\n```html\n<script src=\"//apps.bdimg.com/libs/moment/2.8.3/moment-with-locales.min.js\"></script>\n```\n\n这次打包，结果只用了 49 ms，几乎达到了极限。\n\n## 总结\n\n本文结合本地时钟的例子，展示了定位 Webpack 性能问题的步骤，以及所需要的两个参数 ：`--display-modules` 和 `--profile`。然后，重点介绍了 `resolve.alias` \n即利用别名做重定向的方法和场景，在此基础上，配合 `module.noParse` 忽略某些模块的解析可以进一步加快速度。最后介绍了用 `externals` 定义外部依赖方法来使用公用 CDN。\n","source":"_posts/2015-07-06-alias.md","raw":"---\ntitle: 使用别名做重定向\ndate: 2015-07-06 17:47:55\ntags:\npermalink: alias\n---\n\n## 前言\n\nWebpack 是 OneAPM 前端技术栈中很重要的一部分，它非常好用，如果你还不了解它，建议你阅读这篇 [Webpack 入门指迷](http://segmentfault.com/a/1190000002551952) \n，在 OneAPM 我们用它完成静态资源打包，ES6 代码的转换 ，React 组件的组织等，在接下来的日子里，我们将通过一系列文章和业界分享我们在使用 Webpack 过程中关于性能方面的经验。\n\n作为系列文章的第一篇，我们会重点介绍 Webpack 中的 `resolve.alias` ，也就是请求重定向。不过请注意 Webpack 里的请求是对模块的依赖，也就是一个 `require` 语句，而不是一个 HTTP 请求。\n\n**必要的准备**\n\n- 需要你有一定的 Node.js 基础\n- 电脑上装有最新版的 Webpack (`npm install webpack -g`)\n- 了解 Webpack 配置文件的格式\n\n**例子：本地时钟**\n\n要实现的功能很简单，就是在页面上用中文显示当前时间，需要用到 [`moment`](http://momentjs.com/) 这个库，这个库封装了很多和日期相关的函数，而且自带了国际化的支持。\n\n### 新建一个 Node.js 项目\n\n使用 `npm init` 初始化你的项目，然后通过 `npm install moment -D` 加上 `moment` 的开发者依赖。\n\n新建一个 `entry.js` 作为入口文件，当然你也可以用 `app.js` 这样的名字，只是大部分的 Webpack 示例都是用的是 `entry.js`。\n\n```js\nvar moment = require('moment');\ndocument.write(moment().locale('zh-cn').format('LLLL'));\n```\n\n新建一个页面 `index.html`, 引用 `bundle.js`:\n\n```html\n<body>\n<h5>当前时间:</h5>\n<script src=\"dist/bundle.js\"></script>\n</body>\n```\n\n此时的文件目录看起来是这样的:\n\n```text\nindex.html\npackage.json\nentry.js\nnode_modules/moment\n```\n\n到目前为止 `bundle.js` 这个文件还不存在，不过别着急，接下来的工作就交给 Webpack 来完成。\n\n```text\nindex.html  ------------------------+               \npackage.json                        |               \n                                    +--> <Clock App>\nentry.js    --------+               |               \n                    +-->bundle.js+--+               \nnode_modules/moment-+                                                                                                      \n```       \n\n如图，Webpack 会把 `entry.js` 和 `moment` 模块一起打包成一个 bundle.js 文件，和 `index.html` 一起构成了我们的 Clock App。怎么样，是不是已经听到 Clock App 滴答作响了？\n\n### 使用 webpack 打包代码\n\n在命令行执行：\n\n```sh\nwebpack --entry ./entry.js --output-path dist --output-file bundle.js\n```\n\n你会看到类似下面的输出结果:\n\n```\nHash: bf9007fb1e0cb30e3ef7\nVersion: webpack 1.10.0\nTime: 650ms\n    Asset    Size  Chunks             Chunk Names\nbundle.js  378 kB       0  [emitted]  null\n   [0] ./entry.js 125 bytes {0} [built]\n    + 86 hidden modules\n```\n\n可以看到，耗时 650ms，这么慢着实让人意外，一定要想办法提高“新一代神器”速度；另一方面，最后一行的 **+ 86 hidden modules** 非常让人怀疑：明明是一个简单的 Clock App，怎么会有这么多的依赖。\n\n## 如何快速定位 Webpack 速度慢的原因\n\n再一次，在命令行输入：\n\n```sh\nwebpack --entry ./entry.js --output-path dist --output-file bundle.js \\\n--colors \\\n--profile \\\n--display-modules\n```\n\n不过这次新增加了三个参数，这三个参数的含义分别是：\n\n- `--colors` 输出结果带彩色，比如：会用红色显示耗时较长的步骤\n- `--profile` 输出性能数据，可以看到每一步的耗时\n- `--display-modules` 默认情况下 `node_modules` 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块\n\n这次命令行的结果已经很有参考价值，可以帮助我们定位耗时比较长的步骤\n\n```\nHash: bf9007fb1e0cb30e3ef7\nVersion: webpack 1.10.0\nTime: 650ms\n    Asset    Size  Chunks             Chunk Names\nbundle.js  378 kB       0  [emitted]  null\n   [0] ./entry.js 125 bytes {0} [built]\n       factory:11ms building:8ms = 19ms\n   [1] ../~/moment/moment.js 102 kB {0} [built]\n       [0] 19ms -> factory:7ms building:141ms = 167ms\n   [2] (webpack)/buildin/module.js 251 bytes {0} [built]\n       [0] 19ms -> [1] 148ms -> factory:132ms building:159ms = 458ms\n   [3] ../~/moment/locale ^\\.\\/.*$ 2.01 kB {0} [optional] [built]\n       [0] 19ms -> [1] 148ms -> factory:6ms building:10ms dependencies:113ms = 296ms\n   [4] ../~/moment/locale/af.js 2.57 kB {0} [optional] [built]\n       [0] 19ms -> [1] 148ms -> [3] 16ms -> factory:52ms building:65ms dependencies:138ms = 438ms\n                  ..... 广告分割线，Node.js 工程师简历请发 nodejs@oneapm.com ......\n   [85] ../~/moment/locale/zh-cn.js 4.31 kB {0} [optional] [built]\n        [0] 22ms -> [1] 162ms -> [3] 18ms -> factory:125ms building:145ms dependencies:22ms = 494ms\n   [86] ../~/moment/locale/zh-tw.js 3.07 kB {0} [optional] [built]\n        [0] 22ms -> [1] 162ms -> [3] 18ms -> factory:126ms building:146ms dependencies:21ms = 495ms\n```\n\n从命令行的结果里可以看到从 Request[4] 到 Request[86] 都是在解析 `moment.js` 附带的大量本地化文件。所以我们遇到的速度慢的问题其实是由 `moment` 引起的。\n\n如果你想知道为什么 Webpack 会加载这么多的模块，可以参考这篇文章 [ Why Enormous Locales During Webpack MomentJS](https://github.com/wyvernnot/webpack_performance/tree/master/moment-example/WHY_LOCALES.md)\n\n我们再来看看 `entry.js` 代码的第一行,标准的 `CommonJS` 写法:\n\n```js\nvar moment = require('moment');\n```\n\n也就是说，请求的是 `moment` 的源码。实际上，通过 NPM 安装 `moment` 的时候会同时安装 `moment` 的源码和压缩后的代码，试验证明下面这种写法也是可行的：\n\n```js\nvar moment = require('moment/min/moment-with-locales.min.js');\n```\n\n只不过这样改，可读性会有所下降，而且每一个用到 `moment` 的地方都得这么写。另外，如果同样的问题出现在第三方模块中，修改别人代码就不那么方便了。下面来看看用 Webpack 怎么解决这个问题。\n\n### 在 Webpack 中使用别名\n\n别名（`resolve.alias`） 是 Webpack 的一个配置项，它的作用是把用户的一个请求重定向到另一个路径，例如通过修改 `webpack.config.js` 配置文件，加入：\n\n```\n  resolve: {\n    alias: {\n        moment: \"moment/min/moment-with-locales.min.js\"\n    }\n  }\n```\n\n这样待打包的脚本中的 `require('moment');` 其实就等价于 `require('moment/min/moment-with-locales.min.js');` 。通过别名的使用在本例中可以减少几乎一半的时间。\n\n```\nHash: cdea65709b783ee0741a\nVersion: webpack 1.10.0\nTime: 320ms\n    Asset    Size  Chunks             Chunk Names\nbundle.js  148 kB       0  [emitted]  main\n   [0] ./entry.js 125 bytes {0} [built]\n       factory:11ms building:9ms = 20ms\n   [1] ../~/moment/min/moment-with-locales.min.js 146 kB {0} [built] [1 warning]\n       [0] 20ms -> factory:8ms building:263ms = 291ms\n   [2] (webpack)/buildin/module.js 251 bytes {0} [built]\n       [0] 20ms -> [1] 271ms -> factory:3ms building:1ms = 295ms\n\nWARNING in ../~/moment/min/moment-with-locales.min.js\nModule not found: Error: Cannot resolve 'file' or 'directory' ./locale in */webpack_performance/node_modules/moment/min\n @ ../~/moment/min/moment-with-locales.min.js 1:2731-2753\n```\n\n### 在 Webpack 中忽略对已知文件的解析\n\n`module.noParse` 是 `webpack` 的另一个很有用的配置项，如果你 **确定一个模块中没有其它新的依赖** 就可以配置这项，`webpack` 将不再扫描这个文件中的依赖。\n\n```\n  module: {\n    noParse: [/moment-with-locales/]\n  }\n```\n\n这样修改，再结合前面重命名的例子，更新后的流程是： \n\n- `webpack` 检查到 `entry.js` 文件对 `moment` 的请求；\n- 请求被 `alias` 重定向，转而请求 `moment/min/moment-with-locales.min.js`；\n- `noParse` 规则中的 `/moment-with-locales/` 一条生效，所以 `webpack` 就直接把依赖打包进了 `bundle.js` 。\n\n```\nHash: 907880ed7638b4ed70b9\nVersion: webpack 1.10.0\nTime: 76ms\n    Asset    Size  Chunks             Chunk Names\nbundle.js  147 kB       0  [emitted]  main\n   [0] ./entry.js 125 bytes {0} [built]\n       factory:13ms building:13ms = 26ms\n   [1] ../~/moment/min/moment-with-locales.min.js 146 kB {0} [built]\n       [0] 26ms -> factory:13ms building:5ms = 44ms\n```\n\n时间进一步被压缩，只需要 76ms，比前一步还减少了 75%。\n\n### 在 Webpack 中使用公用 CDN\n\nWebpack 是如此的强大，用其打包的脚本可以运行在多种环境下，Web 环境只是其默认的一种，也是最常用的一种。考虑到 Web 上有很多的公用 CDN 服务，那么\n怎么将 Webpack 和公用的 CDN 结合使用呢？方法是使用 `externals` 声明一个外部依赖。\n\n```\n  externals: {\n    moment: true\n  }\n```\n\n当然了 HTML 代码里需要加上一行\n\n```html\n<script src=\"//apps.bdimg.com/libs/moment/2.8.3/moment-with-locales.min.js\"></script>\n```\n\n这次打包，结果只用了 49 ms，几乎达到了极限。\n\n## 总结\n\n本文结合本地时钟的例子，展示了定位 Webpack 性能问题的步骤，以及所需要的两个参数 ：`--display-modules` 和 `--profile`。然后，重点介绍了 `resolve.alias` \n即利用别名做重定向的方法和场景，在此基础上，配合 `module.noParse` 忽略某些模块的解析可以进一步加快速度。最后介绍了用 `externals` 定义外部依赖方法来使用公用 CDN。\n","slug":"alias","published":1,"updated":"2016-08-25T09:42:35.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisa56ob60003ovdg1pnu3vmc","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Webpack 是 OneAPM 前端技术栈中很重要的一部分，它非常好用，如果你还不了解它，建议你阅读这篇 <a href=\"http://segmentfault.com/a/1190000002551952\" target=\"_blank\" rel=\"external\">Webpack 入门指迷</a><br>，在 OneAPM 我们用它完成静态资源打包，ES6 代码的转换 ，React 组件的组织等，在接下来的日子里，我们将通过一系列文章和业界分享我们在使用 Webpack 过程中关于性能方面的经验。</p>\n<p>作为系列文章的第一篇，我们会重点介绍 Webpack 中的 <code>resolve.alias</code> ，也就是请求重定向。不过请注意 Webpack 里的请求是对模块的依赖，也就是一个 <code>require</code> 语句，而不是一个 HTTP 请求。</p>\n<p><strong>必要的准备</strong></p>\n<ul>\n<li>需要你有一定的 Node.js 基础</li>\n<li>电脑上装有最新版的 Webpack (<code>npm install webpack -g</code>)</li>\n<li>了解 Webpack 配置文件的格式</li>\n</ul>\n<p><strong>例子：本地时钟</strong></p>\n<p>要实现的功能很简单，就是在页面上用中文显示当前时间，需要用到 <a href=\"http://momentjs.com/\" target=\"_blank\" rel=\"external\"><code>moment</code></a> 这个库，这个库封装了很多和日期相关的函数，而且自带了国际化的支持。</p>\n<h3 id=\"新建一个-Node-js-项目\"><a href=\"#新建一个-Node-js-项目\" class=\"headerlink\" title=\"新建一个 Node.js 项目\"></a>新建一个 Node.js 项目</h3><p>使用 <code>npm init</code> 初始化你的项目，然后通过 <code>npm install moment -D</code> 加上 <code>moment</code> 的开发者依赖。</p>\n<p>新建一个 <code>entry.js</code> 作为入口文件，当然你也可以用 <code>app.js</code> 这样的名字，只是大部分的 Webpack 示例都是用的是 <code>entry.js</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.write(moment().locale(<span class=\"string\">'zh-cn'</span>).format(<span class=\"string\">'LLLL'</span>));</div></pre></td></tr></table></figure>\n<p>新建一个页面 <code>index.html</code>, 引用 <code>bundle.js</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>当前时间:<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>此时的文件目录看起来是这样的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">index.html</div><div class=\"line\">package.json</div><div class=\"line\">entry.js</div><div class=\"line\">node_modules/moment</div></pre></td></tr></table></figure>\n<p>到目前为止 <code>bundle.js</code> 这个文件还不存在，不过别着急，接下来的工作就交给 Webpack 来完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">index.html  ------------------------+               </div><div class=\"line\">package.json                        |               </div><div class=\"line\">                                    +--&gt; &lt;Clock App&gt;</div><div class=\"line\">entry.js    --------+               |               </div><div class=\"line\">                    +--&gt;bundle.js+--+               </div><div class=\"line\">node_modules/moment-+                                                                                                      </div><div class=\"line\">```       </div><div class=\"line\"></div><div class=\"line\">如图，Webpack 会把 `entry.js` 和 `moment` 模块一起打包成一个 bundle.js 文件，和 `index.html` 一起构成了我们的 Clock App。怎么样，是不是已经听到 Clock App 滴答作响了？</div><div class=\"line\"></div><div class=\"line\">### 使用 webpack 打包代码</div><div class=\"line\"></div><div class=\"line\">在命令行执行：</div><div class=\"line\"></div><div class=\"line\">```sh</div><div class=\"line\">webpack --entry ./entry.js --output-path dist --output-file bundle.js</div></pre></td></tr></table></figure>\n<p>你会看到类似下面的输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hash: bf9007fb1e0cb30e3ef7</div><div class=\"line\">Version: webpack 1.10.0</div><div class=\"line\">Time: 650ms</div><div class=\"line\">    Asset    Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js  378 kB       0  [emitted]  null</div><div class=\"line\">   [0] ./entry.js 125 bytes &#123;0&#125; [built]</div><div class=\"line\">    + 86 hidden modules</div></pre></td></tr></table></figure>\n<p>可以看到，耗时 650ms，这么慢着实让人意外，一定要想办法提高“新一代神器”速度；另一方面，最后一行的 <strong>+ 86 hidden modules</strong> 非常让人怀疑：明明是一个简单的 Clock App，怎么会有这么多的依赖。</p>\n<h2 id=\"如何快速定位-Webpack-速度慢的原因\"><a href=\"#如何快速定位-Webpack-速度慢的原因\" class=\"headerlink\" title=\"如何快速定位 Webpack 速度慢的原因\"></a>如何快速定位 Webpack 速度慢的原因</h2><p>再一次，在命令行输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack --entry ./entry.js --output-path dist --output-file bundle.js \\</div><div class=\"line\">--colors \\</div><div class=\"line\">--profile \\</div><div class=\"line\">--display-modules</div></pre></td></tr></table></figure>\n<p>不过这次新增加了三个参数，这三个参数的含义分别是：</p>\n<ul>\n<li><code>--colors</code> 输出结果带彩色，比如：会用红色显示耗时较长的步骤</li>\n<li><code>--profile</code> 输出性能数据，可以看到每一步的耗时</li>\n<li><code>--display-modules</code> 默认情况下 <code>node_modules</code> 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块</li>\n</ul>\n<p>这次命令行的结果已经很有参考价值，可以帮助我们定位耗时比较长的步骤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hash: bf9007fb1e0cb30e3ef7</div><div class=\"line\">Version: webpack 1.10.0</div><div class=\"line\">Time: 650ms</div><div class=\"line\">    Asset    Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js  378 kB       0  [emitted]  null</div><div class=\"line\">   [0] ./entry.js 125 bytes &#123;0&#125; [built]</div><div class=\"line\">       factory:11ms building:8ms = 19ms</div><div class=\"line\">   [1] ../~/moment/moment.js 102 kB &#123;0&#125; [built]</div><div class=\"line\">       [0] 19ms -&gt; factory:7ms building:141ms = 167ms</div><div class=\"line\">   [2] (webpack)/buildin/module.js 251 bytes &#123;0&#125; [built]</div><div class=\"line\">       [0] 19ms -&gt; [1] 148ms -&gt; factory:132ms building:159ms = 458ms</div><div class=\"line\">   [3] ../~/moment/locale ^\\.\\/.*$ 2.01 kB &#123;0&#125; [optional] [built]</div><div class=\"line\">       [0] 19ms -&gt; [1] 148ms -&gt; factory:6ms building:10ms dependencies:113ms = 296ms</div><div class=\"line\">   [4] ../~/moment/locale/af.js 2.57 kB &#123;0&#125; [optional] [built]</div><div class=\"line\">       [0] 19ms -&gt; [1] 148ms -&gt; [3] 16ms -&gt; factory:52ms building:65ms dependencies:138ms = 438ms</div><div class=\"line\">                  ..... 广告分割线，Node.js 工程师简历请发 nodejs@oneapm.com ......</div><div class=\"line\">   [85] ../~/moment/locale/zh-cn.js 4.31 kB &#123;0&#125; [optional] [built]</div><div class=\"line\">        [0] 22ms -&gt; [1] 162ms -&gt; [3] 18ms -&gt; factory:125ms building:145ms dependencies:22ms = 494ms</div><div class=\"line\">   [86] ../~/moment/locale/zh-tw.js 3.07 kB &#123;0&#125; [optional] [built]</div><div class=\"line\">        [0] 22ms -&gt; [1] 162ms -&gt; [3] 18ms -&gt; factory:126ms building:146ms dependencies:21ms = 495ms</div></pre></td></tr></table></figure>\n<p>从命令行的结果里可以看到从 Request[4] 到 Request[86] 都是在解析 <code>moment.js</code> 附带的大量本地化文件。所以我们遇到的速度慢的问题其实是由 <code>moment</code> 引起的。</p>\n<p>如果你想知道为什么 Webpack 会加载这么多的模块，可以参考这篇文章 <a href=\"https://github.com/wyvernnot/webpack_performance/tree/master/moment-example/WHY_LOCALES.md\" target=\"_blank\" rel=\"external\"> Why Enormous Locales During Webpack MomentJS</a></p>\n<p>我们再来看看 <code>entry.js</code> 代码的第一行,标准的 <code>CommonJS</code> 写法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>);</div></pre></td></tr></table></figure>\n<p>也就是说，请求的是 <code>moment</code> 的源码。实际上，通过 NPM 安装 <code>moment</code> 的时候会同时安装 <code>moment</code> 的源码和压缩后的代码，试验证明下面这种写法也是可行的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment/min/moment-with-locales.min.js'</span>);</div></pre></td></tr></table></figure>\n<p>只不过这样改，可读性会有所下降，而且每一个用到 <code>moment</code> 的地方都得这么写。另外，如果同样的问题出现在第三方模块中，修改别人代码就不那么方便了。下面来看看用 Webpack 怎么解决这个问题。</p>\n<h3 id=\"在-Webpack-中使用别名\"><a href=\"#在-Webpack-中使用别名\" class=\"headerlink\" title=\"在 Webpack 中使用别名\"></a>在 Webpack 中使用别名</h3><p>别名（<code>resolve.alias</code>） 是 Webpack 的一个配置项，它的作用是把用户的一个请求重定向到另一个路径，例如通过修改 <code>webpack.config.js</code> 配置文件，加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolve: &#123;</div><div class=\"line\">  alias: &#123;</div><div class=\"line\">      moment: &quot;moment/min/moment-with-locales.min.js&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样待打包的脚本中的 <code>require(&#39;moment&#39;);</code> 其实就等价于 <code>require(&#39;moment/min/moment-with-locales.min.js&#39;);</code> 。通过别名的使用在本例中可以减少几乎一半的时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hash: cdea65709b783ee0741a</div><div class=\"line\">Version: webpack 1.10.0</div><div class=\"line\">Time: 320ms</div><div class=\"line\">    Asset    Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js  148 kB       0  [emitted]  main</div><div class=\"line\">   [0] ./entry.js 125 bytes &#123;0&#125; [built]</div><div class=\"line\">       factory:11ms building:9ms = 20ms</div><div class=\"line\">   [1] ../~/moment/min/moment-with-locales.min.js 146 kB &#123;0&#125; [built] [1 warning]</div><div class=\"line\">       [0] 20ms -&gt; factory:8ms building:263ms = 291ms</div><div class=\"line\">   [2] (webpack)/buildin/module.js 251 bytes &#123;0&#125; [built]</div><div class=\"line\">       [0] 20ms -&gt; [1] 271ms -&gt; factory:3ms building:1ms = 295ms</div><div class=\"line\"></div><div class=\"line\">WARNING in ../~/moment/min/moment-with-locales.min.js</div><div class=\"line\">Module not found: Error: Cannot resolve &apos;file&apos; or &apos;directory&apos; ./locale in */webpack_performance/node_modules/moment/min</div><div class=\"line\"> @ ../~/moment/min/moment-with-locales.min.js 1:2731-2753</div></pre></td></tr></table></figure>\n<h3 id=\"在-Webpack-中忽略对已知文件的解析\"><a href=\"#在-Webpack-中忽略对已知文件的解析\" class=\"headerlink\" title=\"在 Webpack 中忽略对已知文件的解析\"></a>在 Webpack 中忽略对已知文件的解析</h3><p><code>module.noParse</code> 是 <code>webpack</code> 的另一个很有用的配置项，如果你 <strong>确定一个模块中没有其它新的依赖</strong> 就可以配置这项，<code>webpack</code> 将不再扫描这个文件中的依赖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">module: &#123;</div><div class=\"line\">  noParse: [/moment-with-locales/]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样修改，再结合前面重命名的例子，更新后的流程是： </p>\n<ul>\n<li><code>webpack</code> 检查到 <code>entry.js</code> 文件对 <code>moment</code> 的请求；</li>\n<li>请求被 <code>alias</code> 重定向，转而请求 <code>moment/min/moment-with-locales.min.js</code>；</li>\n<li><code>noParse</code> 规则中的 <code>/moment-with-locales/</code> 一条生效，所以 <code>webpack</code> 就直接把依赖打包进了 <code>bundle.js</code> 。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hash: 907880ed7638b4ed70b9</div><div class=\"line\">Version: webpack 1.10.0</div><div class=\"line\">Time: 76ms</div><div class=\"line\">    Asset    Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js  147 kB       0  [emitted]  main</div><div class=\"line\">   [0] ./entry.js 125 bytes &#123;0&#125; [built]</div><div class=\"line\">       factory:13ms building:13ms = 26ms</div><div class=\"line\">   [1] ../~/moment/min/moment-with-locales.min.js 146 kB &#123;0&#125; [built]</div><div class=\"line\">       [0] 26ms -&gt; factory:13ms building:5ms = 44ms</div></pre></td></tr></table></figure>\n<p>时间进一步被压缩，只需要 76ms，比前一步还减少了 75%。</p>\n<h3 id=\"在-Webpack-中使用公用-CDN\"><a href=\"#在-Webpack-中使用公用-CDN\" class=\"headerlink\" title=\"在 Webpack 中使用公用 CDN\"></a>在 Webpack 中使用公用 CDN</h3><p>Webpack 是如此的强大，用其打包的脚本可以运行在多种环境下，Web 环境只是其默认的一种，也是最常用的一种。考虑到 Web 上有很多的公用 CDN 服务，那么<br>怎么将 Webpack 和公用的 CDN 结合使用呢？方法是使用 <code>externals</code> 声明一个外部依赖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">externals: &#123;</div><div class=\"line\">  moment: true</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然了 HTML 代码里需要加上一行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//apps.bdimg.com/libs/moment/2.8.3/moment-with-locales.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这次打包，结果只用了 49 ms，几乎达到了极限。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文结合本地时钟的例子，展示了定位 Webpack 性能问题的步骤，以及所需要的两个参数 ：<code>--display-modules</code> 和 <code>--profile</code>。然后，重点介绍了 <code>resolve.alias</code><br>即利用别名做重定向的方法和场景，在此基础上，配合 <code>module.noParse</code> 忽略某些模块的解析可以进一步加快速度。最后介绍了用 <code>externals</code> 定义外部依赖方法来使用公用 CDN。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Webpack 是 OneAPM 前端技术栈中很重要的一部分，它非常好用，如果你还不了解它，建议你阅读这篇 <a href=\"http://segmentfault.com/a/1190000002551952\">Webpack 入门指迷</a><br>，在 OneAPM 我们用它完成静态资源打包，ES6 代码的转换 ，React 组件的组织等，在接下来的日子里，我们将通过一系列文章和业界分享我们在使用 Webpack 过程中关于性能方面的经验。</p>\n<p>作为系列文章的第一篇，我们会重点介绍 Webpack 中的 <code>resolve.alias</code> ，也就是请求重定向。不过请注意 Webpack 里的请求是对模块的依赖，也就是一个 <code>require</code> 语句，而不是一个 HTTP 请求。</p>\n<p><strong>必要的准备</strong></p>\n<ul>\n<li>需要你有一定的 Node.js 基础</li>\n<li>电脑上装有最新版的 Webpack (<code>npm install webpack -g</code>)</li>\n<li>了解 Webpack 配置文件的格式</li>\n</ul>\n<p><strong>例子：本地时钟</strong></p>\n<p>要实现的功能很简单，就是在页面上用中文显示当前时间，需要用到 <a href=\"http://momentjs.com/\"><code>moment</code></a> 这个库，这个库封装了很多和日期相关的函数，而且自带了国际化的支持。</p>\n<h3 id=\"新建一个-Node-js-项目\"><a href=\"#新建一个-Node-js-项目\" class=\"headerlink\" title=\"新建一个 Node.js 项目\"></a>新建一个 Node.js 项目</h3><p>使用 <code>npm init</code> 初始化你的项目，然后通过 <code>npm install moment -D</code> 加上 <code>moment</code> 的开发者依赖。</p>\n<p>新建一个 <code>entry.js</code> 作为入口文件，当然你也可以用 <code>app.js</code> 这样的名字，只是大部分的 Webpack 示例都是用的是 <code>entry.js</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.write(moment().locale(<span class=\"string\">'zh-cn'</span>).format(<span class=\"string\">'LLLL'</span>));</div></pre></td></tr></table></figure>\n<p>新建一个页面 <code>index.html</code>, 引用 <code>bundle.js</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>当前时间:<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>此时的文件目录看起来是这样的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">index.html</div><div class=\"line\">package.json</div><div class=\"line\">entry.js</div><div class=\"line\">node_modules/moment</div></pre></td></tr></table></figure>\n<p>到目前为止 <code>bundle.js</code> 这个文件还不存在，不过别着急，接下来的工作就交给 Webpack 来完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">index.html  ------------------------+               </div><div class=\"line\">package.json                        |               </div><div class=\"line\">                                    +--&gt; &lt;Clock App&gt;</div><div class=\"line\">entry.js    --------+               |               </div><div class=\"line\">                    +--&gt;bundle.js+--+               </div><div class=\"line\">node_modules/moment-+                                                                                                      </div><div class=\"line\">```       </div><div class=\"line\"></div><div class=\"line\">如图，Webpack 会把 `entry.js` 和 `moment` 模块一起打包成一个 bundle.js 文件，和 `index.html` 一起构成了我们的 Clock App。怎么样，是不是已经听到 Clock App 滴答作响了？</div><div class=\"line\"></div><div class=\"line\">### 使用 webpack 打包代码</div><div class=\"line\"></div><div class=\"line\">在命令行执行：</div><div class=\"line\"></div><div class=\"line\">```sh</div><div class=\"line\">webpack --entry ./entry.js --output-path dist --output-file bundle.js</div></pre></td></tr></table></figure>\n<p>你会看到类似下面的输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hash: bf9007fb1e0cb30e3ef7</div><div class=\"line\">Version: webpack 1.10.0</div><div class=\"line\">Time: 650ms</div><div class=\"line\">    Asset    Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js  378 kB       0  [emitted]  null</div><div class=\"line\">   [0] ./entry.js 125 bytes &#123;0&#125; [built]</div><div class=\"line\">    + 86 hidden modules</div></pre></td></tr></table></figure>\n<p>可以看到，耗时 650ms，这么慢着实让人意外，一定要想办法提高“新一代神器”速度；另一方面，最后一行的 <strong>+ 86 hidden modules</strong> 非常让人怀疑：明明是一个简单的 Clock App，怎么会有这么多的依赖。</p>\n<h2 id=\"如何快速定位-Webpack-速度慢的原因\"><a href=\"#如何快速定位-Webpack-速度慢的原因\" class=\"headerlink\" title=\"如何快速定位 Webpack 速度慢的原因\"></a>如何快速定位 Webpack 速度慢的原因</h2><p>再一次，在命令行输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack --entry ./entry.js --output-path dist --output-file bundle.js \\</div><div class=\"line\">--colors \\</div><div class=\"line\">--profile \\</div><div class=\"line\">--display-modules</div></pre></td></tr></table></figure>\n<p>不过这次新增加了三个参数，这三个参数的含义分别是：</p>\n<ul>\n<li><code>--colors</code> 输出结果带彩色，比如：会用红色显示耗时较长的步骤</li>\n<li><code>--profile</code> 输出性能数据，可以看到每一步的耗时</li>\n<li><code>--display-modules</code> 默认情况下 <code>node_modules</code> 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块</li>\n</ul>\n<p>这次命令行的结果已经很有参考价值，可以帮助我们定位耗时比较长的步骤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hash: bf9007fb1e0cb30e3ef7</div><div class=\"line\">Version: webpack 1.10.0</div><div class=\"line\">Time: 650ms</div><div class=\"line\">    Asset    Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js  378 kB       0  [emitted]  null</div><div class=\"line\">   [0] ./entry.js 125 bytes &#123;0&#125; [built]</div><div class=\"line\">       factory:11ms building:8ms = 19ms</div><div class=\"line\">   [1] ../~/moment/moment.js 102 kB &#123;0&#125; [built]</div><div class=\"line\">       [0] 19ms -&gt; factory:7ms building:141ms = 167ms</div><div class=\"line\">   [2] (webpack)/buildin/module.js 251 bytes &#123;0&#125; [built]</div><div class=\"line\">       [0] 19ms -&gt; [1] 148ms -&gt; factory:132ms building:159ms = 458ms</div><div class=\"line\">   [3] ../~/moment/locale ^\\.\\/.*$ 2.01 kB &#123;0&#125; [optional] [built]</div><div class=\"line\">       [0] 19ms -&gt; [1] 148ms -&gt; factory:6ms building:10ms dependencies:113ms = 296ms</div><div class=\"line\">   [4] ../~/moment/locale/af.js 2.57 kB &#123;0&#125; [optional] [built]</div><div class=\"line\">       [0] 19ms -&gt; [1] 148ms -&gt; [3] 16ms -&gt; factory:52ms building:65ms dependencies:138ms = 438ms</div><div class=\"line\">                  ..... 广告分割线，Node.js 工程师简历请发 nodejs@oneapm.com ......</div><div class=\"line\">   [85] ../~/moment/locale/zh-cn.js 4.31 kB &#123;0&#125; [optional] [built]</div><div class=\"line\">        [0] 22ms -&gt; [1] 162ms -&gt; [3] 18ms -&gt; factory:125ms building:145ms dependencies:22ms = 494ms</div><div class=\"line\">   [86] ../~/moment/locale/zh-tw.js 3.07 kB &#123;0&#125; [optional] [built]</div><div class=\"line\">        [0] 22ms -&gt; [1] 162ms -&gt; [3] 18ms -&gt; factory:126ms building:146ms dependencies:21ms = 495ms</div></pre></td></tr></table></figure>\n<p>从命令行的结果里可以看到从 Request[4] 到 Request[86] 都是在解析 <code>moment.js</code> 附带的大量本地化文件。所以我们遇到的速度慢的问题其实是由 <code>moment</code> 引起的。</p>\n<p>如果你想知道为什么 Webpack 会加载这么多的模块，可以参考这篇文章 <a href=\"https://github.com/wyvernnot/webpack_performance/tree/master/moment-example/WHY_LOCALES.md\"> Why Enormous Locales During Webpack MomentJS</a></p>\n<p>我们再来看看 <code>entry.js</code> 代码的第一行,标准的 <code>CommonJS</code> 写法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>);</div></pre></td></tr></table></figure>\n<p>也就是说，请求的是 <code>moment</code> 的源码。实际上，通过 NPM 安装 <code>moment</code> 的时候会同时安装 <code>moment</code> 的源码和压缩后的代码，试验证明下面这种写法也是可行的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment/min/moment-with-locales.min.js'</span>);</div></pre></td></tr></table></figure>\n<p>只不过这样改，可读性会有所下降，而且每一个用到 <code>moment</code> 的地方都得这么写。另外，如果同样的问题出现在第三方模块中，修改别人代码就不那么方便了。下面来看看用 Webpack 怎么解决这个问题。</p>\n<h3 id=\"在-Webpack-中使用别名\"><a href=\"#在-Webpack-中使用别名\" class=\"headerlink\" title=\"在 Webpack 中使用别名\"></a>在 Webpack 中使用别名</h3><p>别名（<code>resolve.alias</code>） 是 Webpack 的一个配置项，它的作用是把用户的一个请求重定向到另一个路径，例如通过修改 <code>webpack.config.js</code> 配置文件，加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolve: &#123;</div><div class=\"line\">  alias: &#123;</div><div class=\"line\">      moment: &quot;moment/min/moment-with-locales.min.js&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样待打包的脚本中的 <code>require(&#39;moment&#39;);</code> 其实就等价于 <code>require(&#39;moment/min/moment-with-locales.min.js&#39;);</code> 。通过别名的使用在本例中可以减少几乎一半的时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hash: cdea65709b783ee0741a</div><div class=\"line\">Version: webpack 1.10.0</div><div class=\"line\">Time: 320ms</div><div class=\"line\">    Asset    Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js  148 kB       0  [emitted]  main</div><div class=\"line\">   [0] ./entry.js 125 bytes &#123;0&#125; [built]</div><div class=\"line\">       factory:11ms building:9ms = 20ms</div><div class=\"line\">   [1] ../~/moment/min/moment-with-locales.min.js 146 kB &#123;0&#125; [built] [1 warning]</div><div class=\"line\">       [0] 20ms -&gt; factory:8ms building:263ms = 291ms</div><div class=\"line\">   [2] (webpack)/buildin/module.js 251 bytes &#123;0&#125; [built]</div><div class=\"line\">       [0] 20ms -&gt; [1] 271ms -&gt; factory:3ms building:1ms = 295ms</div><div class=\"line\"></div><div class=\"line\">WARNING in ../~/moment/min/moment-with-locales.min.js</div><div class=\"line\">Module not found: Error: Cannot resolve &apos;file&apos; or &apos;directory&apos; ./locale in */webpack_performance/node_modules/moment/min</div><div class=\"line\"> @ ../~/moment/min/moment-with-locales.min.js 1:2731-2753</div></pre></td></tr></table></figure>\n<h3 id=\"在-Webpack-中忽略对已知文件的解析\"><a href=\"#在-Webpack-中忽略对已知文件的解析\" class=\"headerlink\" title=\"在 Webpack 中忽略对已知文件的解析\"></a>在 Webpack 中忽略对已知文件的解析</h3><p><code>module.noParse</code> 是 <code>webpack</code> 的另一个很有用的配置项，如果你 <strong>确定一个模块中没有其它新的依赖</strong> 就可以配置这项，<code>webpack</code> 将不再扫描这个文件中的依赖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">module: &#123;</div><div class=\"line\">  noParse: [/moment-with-locales/]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样修改，再结合前面重命名的例子，更新后的流程是： </p>\n<ul>\n<li><code>webpack</code> 检查到 <code>entry.js</code> 文件对 <code>moment</code> 的请求；</li>\n<li>请求被 <code>alias</code> 重定向，转而请求 <code>moment/min/moment-with-locales.min.js</code>；</li>\n<li><code>noParse</code> 规则中的 <code>/moment-with-locales/</code> 一条生效，所以 <code>webpack</code> 就直接把依赖打包进了 <code>bundle.js</code> 。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hash: 907880ed7638b4ed70b9</div><div class=\"line\">Version: webpack 1.10.0</div><div class=\"line\">Time: 76ms</div><div class=\"line\">    Asset    Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js  147 kB       0  [emitted]  main</div><div class=\"line\">   [0] ./entry.js 125 bytes &#123;0&#125; [built]</div><div class=\"line\">       factory:13ms building:13ms = 26ms</div><div class=\"line\">   [1] ../~/moment/min/moment-with-locales.min.js 146 kB &#123;0&#125; [built]</div><div class=\"line\">       [0] 26ms -&gt; factory:13ms building:5ms = 44ms</div></pre></td></tr></table></figure>\n<p>时间进一步被压缩，只需要 76ms，比前一步还减少了 75%。</p>\n<h3 id=\"在-Webpack-中使用公用-CDN\"><a href=\"#在-Webpack-中使用公用-CDN\" class=\"headerlink\" title=\"在 Webpack 中使用公用 CDN\"></a>在 Webpack 中使用公用 CDN</h3><p>Webpack 是如此的强大，用其打包的脚本可以运行在多种环境下，Web 环境只是其默认的一种，也是最常用的一种。考虑到 Web 上有很多的公用 CDN 服务，那么<br>怎么将 Webpack 和公用的 CDN 结合使用呢？方法是使用 <code>externals</code> 声明一个外部依赖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">externals: &#123;</div><div class=\"line\">  moment: true</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然了 HTML 代码里需要加上一行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//apps.bdimg.com/libs/moment/2.8.3/moment-with-locales.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这次打包，结果只用了 49 ms，几乎达到了极限。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文结合本地时钟的例子，展示了定位 Webpack 性能问题的步骤，以及所需要的两个参数 ：<code>--display-modules</code> 和 <code>--profile</code>。然后，重点介绍了 <code>resolve.alias</code><br>即利用别名做重定向的方法和场景，在此基础上，配合 <code>module.noParse</code> 忽略某些模块的解析可以进一步加快速度。最后介绍了用 <code>externals</code> 定义外部依赖方法来使用公用 CDN。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}